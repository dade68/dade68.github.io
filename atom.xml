<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dade68.github.io</id>
    <title>flowaflow</title>
    <updated>2021-03-06T08:20:56.507Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dade68.github.io"/>
    <link rel="self" href="https://dade68.github.io/atom.xml"/>
    <subtitle>Welcome to my secret park!</subtitle>
    <logo>https://dade68.github.io/images/avatar.png</logo>
    <icon>https://dade68.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, flowaflow</rights>
    <entry>
        <title type="html"><![CDATA[Mysql 查询]]></title>
        <id>https://dade68.github.io/post/mysql-cha-xun/</id>
        <link href="https://dade68.github.io/post/mysql-cha-xun/">
        </link>
        <updated>2021-03-06T07:55:47.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>基础查询<br>
语法：<br>
select 查询列表 from 表名<br>
查询列表可以是字段、表达式、常量、函数等<br>
常量     ===&gt;     select 100;<br>
表达式     ===&gt;     select 100%3;<br>
字段     ===&gt;     select last_name from employees;<br>
函数(调用函数，获取返回值)     ===&gt;     select database(); select version();  select user();</li>
</ol>
<p>起别名</p>
<ol>
<li>使用as关键字     ===&gt;     select user() as 用户名；</li>
<li>使用空格     ===&gt;     select user() 用户名；</li>
</ol>
<p>distinct  去掉重复项<br>
select distinct department_id from employees;</p>
<p>查看表的结构<br>
DESC employees;<br>
show columns from employees;</p>
<p>ifnull(表达式1,表达式2)<br>
表达式1：可能为null的字段或表达式<br>
表达式2：如果表达式1位null，则显示表达式2，否则显示表达式1</p>
<ol start="2">
<li>
<p>条件查询<br>
语法：<br>
select 查询列表 from 表名 where 筛选条件</p>
<ol>
<li>按关系表达式筛选<br>
关系运算符： &gt;、 &lt;、 &gt;=、 &lt;=、 =、 ！=、 &lt;&gt;、</li>
<li>按逻辑表达式筛选<br>
逻辑运算符： and、 or、 not、 &amp;&amp;、 ||、 ！、</li>
<li>模糊查询<br>
like、 in、 between and、 is null、<br>
like     ===&gt;     一般与通配符搭配使用，部分匹配查询<br>
常见通配符： _    ===&gt;     任意单个字符<br>
%     ===&gt;     任意多个字符<br>
in     ===&gt;     查询某字段的值是否属于制定列表之内<br>
in (常量值1，常量值2，常量值3，...)<br>
between and     ===&gt;     判断某个阻断是否介于xx之间<br>
is null     ===&gt;     查询是否为null值<br>
&lt;=&gt;     ===&gt;     安全等于，既能判断普通内容，又能判断null值</li>
</ol>
</li>
<li>
<p>排序查询<br>
语法：<br>
select 查询列表 from 表名 [where 筛选条件] order by 排序列表<br>
排序列表可以是单个字段，多个字段，表达式，函数，列数，以及以上的组合<br>
升序 asc 默认行为     降序 desc</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jyy-os：P16 [虚拟化]处理器调度(1)：时间片,RR,MLFQ和CFS]]></title>
        <id>https://dade68.github.io/post/jyy-osp16-xu-ni-hua-chu-li-qi-diao-du-1shi-jian-pian-rrmlfq-he-cfs/</id>
        <link href="https://dade68.github.io/post/jyy-osp16-xu-ni-hua-chu-li-qi-diao-du-1shi-jian-pian-rrmlfq-he-cfs/">
        </link>
        <updated>2021-03-04T06:01:46.000Z</updated>
        <content type="html"><![CDATA[<p>有n个任务，完成时间为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>t</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>t</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">t_1, t_2, ......, t_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<br>
最小化所有任务平均cost            ===&gt;&gt;            Shortest job first(SJF)</p>
<p>任务可以在一天中任意时刻到达<br>
最小化所有任务平均cost            ===&gt;&gt;           Shortest Time-to-Completion First(STCF)</p>
<p>策略： RoundRobin                 ===&gt;&gt;           时间片轮转</p>
<p>策略： 引入优先级                    ===&gt;&gt;            Unix：niceness</p>
<p>策略： 多级反馈调度(MLFQ)     ===&gt;&gt;            设置若干个Round-Robin队列，每个队列对应一个优先级， 优先调度高优先级队列</p>
<p>策略： Complete Fair Scheduling(CFS) 完全公平调度（Linux中使用）   ===&gt;&gt;</p>
<ol>
<li>记录系统中每个进程的精确运行时间(vruntime, nanoseconds)</li>
<li>中断发生后，切换到vruntime最少的进程执行<br>
Linux中使用红黑树维护，使用堆也可以</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSAPP lab3 attack]]></title>
        <id>https://dade68.github.io/post/csapp-lab3-attack/</id>
        <link href="https://dade68.github.io/post/csapp-lab3-attack/">
        </link>
        <updated>2021-01-05T04:31:07.000Z</updated>
        <content type="html"><![CDATA[<p>ROP(return-oriented programming)<br>
从前面我们可以知道，有缓冲区加上缓冲区的代码可以执行使得程序非常容易被攻击，但是在<strong>rtarget</strong>中使用了两个技术来防止这种攻击：</p>
<ul>
<li>每次栈的位置是随机的，于是我们没有办法确定需要跳转的地址</li>
<li>即使我们能够找到规律注入代码，但是栈是不可执行的，一旦执行，则会遇到段错误</li>
</ul>
<p>那么现在怎么办呢？可以利用已有的可执行的代码，来完成我们的操作，称为 retrun-oriented   programming(ROP)，策略就是找到现存代码中的若干条指令，这些指令后面跟着指令 ret，如下图所示<br>
<img src="https://dade68.github.io/post-images/1609827370643.jpg" alt="" loading="lazy"><br>
每次 return 相当于从一个 gadget 跳转到另一个 gadget 中，然后通过这样不断跳转来完成我们想要的操作。</p>
<ul>
<li>level2</li>
</ul>
<blockquote>
<p>ret：一个字节编码0x30<br>
nop：一个字节码0x90，什么都不做，只是让程序计数器加1</p>
</blockquote>
<p>三步走战略：</p>
<ol>
<li>把cookie搞到 <strong>%rdi</strong>中</li>
<li>把 <strong>touch2</strong>的地址放入栈中</li>
<li>ret 以开始执行</li>
</ol>
<pre><code>00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
ab 19 40 00 00 00 00 00
fa 97 b9 59 00 00 00 00
a2 19 40 00 00 00 00 00
ec 17 40 00 00 00 00 00
</code></pre>
<ul>
<li>3</li>
</ul>
<p>三步走战略：</p>
<ol>
<li>把cookie 转换成 ASCII码通过缓冲区溢出放到栈的某个位置</li>
<li>把指向cookie字符串的指针放到 <strong>%rdi</strong> 中
<blockquote>
<p>把 <strong>%rsp</strong>里的栈指针地址放到**%rdi**，拿到bias的值放到**%rsi**，利用add xy，把栈指针地址和bias加起来放到**%rax**，再传到**%rdx**</p>
</blockquote>
</li>
<li>调用touch3<br>
内存栈示意图：<br>
<img src="https://dade68.github.io/post-images/1609829073023.jpg" alt="" loading="lazy"></li>
</ol>
<pre><code>00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
06 1a 40 00 00 00 00 00
c5 19 40 00 00 00 00 00
cc 19 40 00 00 00 00 00
48 00 00 00 00 00 00 00
dd 19 40 00 00 00 00 00
34 1a 40 00 00 00 00 00
13 1a 40 00 00 00 00 00
d6 19 40 00 00 00 00 00
c5 19 40 00 00 00 00 00
fa 18 40 00 00 00 00 00
35 39 62 39 39 37 66 61
00
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 整数寄存器]]></title>
        <id>https://dade68.github.io/post/zheng-shu-ji-cun-qi/</id>
        <link href="https://dade68.github.io/post/zheng-shu-ji-cun-qi/">
        </link>
        <updated>2021-01-02T05:32:22.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>63</th>
<th style="text-align:left">31</th>
<th style="text-align:left">15</th>
<th style="text-align:left">7</th>
<th style="text-align:left">0</th>
</tr>
</thead>
<tbody>
<tr>
<td>%rax</td>
<td style="text-align:left">%eax</td>
<td style="text-align:left">%ax</td>
<td style="text-align:left">%al</td>
<td style="text-align:left">返回值</td>
</tr>
<tr>
<td>%rbx</td>
<td style="text-align:left">%ebx</td>
<td style="text-align:left">%bx</td>
<td style="text-align:left">%bl</td>
<td style="text-align:left">被调用者保存</td>
</tr>
<tr>
<td>%rcx</td>
<td style="text-align:left">%ecx</td>
<td style="text-align:left">%cx</td>
<td style="text-align:left">%cl</td>
<td style="text-align:left">第4个参数</td>
</tr>
<tr>
<td>%rdx</td>
<td style="text-align:left">%edx</td>
<td style="text-align:left">%dx</td>
<td style="text-align:left">%dl</td>
<td style="text-align:left">第3个参数</td>
</tr>
<tr>
<td>%rsi</td>
<td style="text-align:left">%esi</td>
<td style="text-align:left">%si</td>
<td style="text-align:left">%sil</td>
<td style="text-align:left">第2个参数</td>
</tr>
<tr>
<td>%rdi</td>
<td style="text-align:left">%edi</td>
<td style="text-align:left">%di</td>
<td style="text-align:left">%dil</td>
<td style="text-align:left">第1个参数</td>
</tr>
<tr>
<td>%rbp</td>
<td style="text-align:left">%ebp</td>
<td style="text-align:left">%bp</td>
<td style="text-align:left">%bpl</td>
<td style="text-align:left">被调用者保存</td>
</tr>
<tr>
<td>%rsp</td>
<td style="text-align:left">%esp</td>
<td style="text-align:left">%sp</td>
<td style="text-align:left">%spl</td>
<td style="text-align:left">栈指针</td>
</tr>
<tr>
<td>%r8</td>
<td style="text-align:left">%r8d</td>
<td style="text-align:left">%r8w</td>
<td style="text-align:left">%r8b</td>
<td style="text-align:left">第5个参数</td>
</tr>
<tr>
<td>%r9</td>
<td style="text-align:left">%r9d</td>
<td style="text-align:left">%r9w</td>
<td style="text-align:left">%r9b</td>
<td style="text-align:left">第6个参数</td>
</tr>
<tr>
<td>%r10</td>
<td style="text-align:left">%r10d</td>
<td style="text-align:left">%r10w</td>
<td style="text-align:left">%r10b</td>
<td style="text-align:left">调用者保存</td>
</tr>
<tr>
<td>%r11</td>
<td style="text-align:left">%r11d</td>
<td style="text-align:left">%r11w</td>
<td style="text-align:left">%r11b</td>
<td style="text-align:left">调用者保存</td>
</tr>
<tr>
<td>%r12</td>
<td style="text-align:left">%r12d</td>
<td style="text-align:left">%r12w</td>
<td style="text-align:left">%r12b</td>
<td style="text-align:left">被调用者保存</td>
</tr>
<tr>
<td>%r13</td>
<td style="text-align:left">%r13d</td>
<td style="text-align:left">%r13w</td>
<td style="text-align:left">%r13b</td>
<td style="text-align:left">被调用者保存</td>
</tr>
<tr>
<td>%r14</td>
<td style="text-align:left">%r14d</td>
<td style="text-align:left">%r14w</td>
<td style="text-align:left">%r14b</td>
<td style="text-align:left">被调用者保存</td>
</tr>
<tr>
<td>%r15</td>
<td style="text-align:left">%r15d</td>
<td style="text-align:left">%r15w</td>
<td style="text-align:left">%r15b</td>
<td style="text-align:left">被调用者保存</td>
</tr>
</tbody>
</table>
<p>程序计数器 --&gt; %rip<br>
% -----&gt; AT&amp;T风格</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSAPP lab1]]></title>
        <id>https://dade68.github.io/post/csapp-lab1/</id>
        <link href="https://dade68.github.io/post/csapp-lab1/">
        </link>
        <updated>2020-12-25T08:51:07.000Z</updated>
        <content type="html"><![CDATA[<pre><code>//3
/* 
 * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')
 *   Example: isAsciiDigit(0x35) = 1.
 *            isAsciiDigit(0x3a) = 0.
 *            isAsciiDigit(0x05) = 0.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 15
 *   Rating: 3
 */
int isAsciiDigit(int x) {
    int sign = 0x1&lt;&lt;31;
    int upperBound = ~(sign|0x39);
    int lowerBound = ~0x30;
    upperBound = sign&amp;(upperBound+x)&gt;&gt;31;
    lowerBound = sign&amp;(lowerBound+1+x)&gt;&gt;31;
    return !(upperBound|lowerBound);
}
</code></pre>
<ul>
<li>判断是否大于或小于某个数，这里的做法是通过判断将这个数加到某个数上，最高位是否改变来判断的</li>
</ul>
<pre><code>/* 
 * conditional - same as x ? y : z 
 *   Example: conditional(2,4,5) = 4
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 16
 *   Rating: 3
 */
int conditional(int x, int y, int z) {
    int flag = (~!x) + 1;
    return (flag &amp; z) | (~flag &amp; y);
}
</code></pre>
<ul>
<li>转换为全0和全1</li>
</ul>
<pre><code>/* 
 * isLessOrEqual - if x &lt;= y  then return 1, else return 0 
 *   Example: isLessOrEqual(4,5) = 1.
 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 24
 *   Rating: 3
 */
int isLessOrEqual(int x, int y) {
    int sign = (x &gt;&gt; 31) ^ (y &gt;&gt; 31);
    int a = 0x1 &amp; sign &amp; (x &gt;&gt; 31);
    int b = !sign &amp; !((y + ~x + 1) &gt;&gt; 31);
    return a | b;
}
</code></pre>
<ul>
<li>先判断二者是否同号，同号按正常处理 x + (-y)；异号就看负号或正号在哪边</li>
</ul>
<pre><code>/* 
 * logicalNeg - implement the ! operator, using all of 
 *              the legal operators except !
 *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1
 *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;
 *   Max ops: 12
 *   Rating: 4 
 */
int logicalNeg(int x) {
    int a = x &gt;&gt; 31;
    int b = (~x + 1) &gt;&gt; 31;
    return (a | b) + 1;
}
</code></pre>
<ul>
<li>核心在于找0的特点，+0，-0最高位都为0，全1和全0加1就变成了0和1，可以作为返回值</li>
</ul>
<hr>
<h3 id="浮点数">浮点数</h3>
<pre><code>//float
/* 
 * floatScale2 - Return bit-level equivalent of expression 2*f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representation of
 *   single-precision floating point values.
 *   When argument is NaN, return argument
 *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned floatScale2(unsigned uf) {
    int sign = uf &gt;&gt; 31;
    int exp = (uf &amp; 0x7f800000) &gt;&gt; 23;
    int frac = uf &amp; 0x7fffff;

    if (exp == 255) {
        return uf;
    } else if (exp == 0) {
        frac &lt;&lt;= 1;
        return sign &lt;&lt; 31 | exp &lt;&lt; 23 | frac;
    } else {
        exp += 1;
        return  sign &lt;&lt; 31 | exp &lt;&lt; 23 | frac;
    }
}
/*
 * floatFloat2Int - Return bit-level equivalent of expression (int) f
 *   for floating point argument f.
 *   Argument is passed as unsigned int, but
 *   it is to be interpreted as the bit-level representation of a
 *   single-precision floating point value.
 *   Anything out of range (including NaN and infinity) should return
 *   0x80000000u.
 *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
int floatFloat2Int(unsigned uf) {
     int sign = (uf &gt;&gt; 31) &amp; 0x1;
     int exp = ((uf &amp; 0x7f800000) &gt;&gt; 23) - 127;
     int frac = uf &amp; 0x7fffff;

     if (exp &lt; 0) return 0;
     else if (exp &gt;= 31) return 0x80000000u;
     else {
         frac = frac | (1 &lt;&lt; 23);
         if (exp &gt; 23) frac &lt;&lt;= (exp - 23);
         else frac &gt;&gt;= (23 - exp);
     }
     if (sign) return -frac;
     else return frac;
}
/* 
 * floatPower2 - Return bit-level equivalent of the expression 2.0^x
 *   (2.0 raised to the power x) for any 32-bit integer x.
 *
 *   The unsigned value that is returned should have the identical bit
 *   representation as the single-precision floating-point number 2.0^x.
 *   If the result is too small to be represented as a denorm, return
 *   0. If too large, return +INF.
 * 
 *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while 
 *   Max ops: 30 
 *   Rating: 4
 */
unsigned floatPower2(int x) {
    if (x &gt;= 128) return 0xff &lt;&lt;23;
    else if (x &lt; -149) return 0;
    else {
        if (x &gt;= -126) return (x + 127) &lt;&lt; 23;
        else return 1 &lt;&lt; (x + 149);
    }
}
</code></pre>
<ul>
<li><img src="https://dade68.github.io/post-images/1608962095418.jpg" alt="" loading="lazy"></li>
<li><img src="https://dade68.github.io/post-images/1608962109785.jpg" alt="" loading="lazy"></li>
<li><img src="https://dade68.github.io/post-images/1608962144892.jpg" alt="" loading="lazy"></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Head First 设计模式 Chapter6：命令模式--封装调用]]></title>
        <id>https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter6ming-ling-mo-shi-feng-zhuang-diao-yong/</id>
        <link href="https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter6ming-ling-mo-shi-feng-zhuang-diao-yong/">
        </link>
        <updated>2020-12-23T02:58:52.000Z</updated>
        <content type="html"><![CDATA[<p>命令模式：</p>
<blockquote>
<p>将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。</p>
</blockquote>
<blockquote>
<p>Nocommand 对象是一个空对象(null object)的例子。当你不想返回一个有意义的的对象时，空对象就很有用。客户也可以将处理 null 的责任转移给空对象。举例来说，遥控器不可能一出厂就设置了有意义的命令对象，所以提供了 NoCommand 对象作为代用品，当调用它的 execute() 方法时，这种对象什么事情都不做。<br>
在许多设计模式中，都会看到空对象的使用。甚至有些时候，空对象本身也被视为是一种设计模式。</p>
</blockquote>
<p>在宏命令中，用命令数组存储一大堆命令。</p>
<p>要点：</p>
<ul>
<li>命令模式将发出请求的对象和执行请求的对象解耦。</li>
<li>在被解耦的两者之间是通过命令对象进行沟通的。命令对象封装了接受者和一个或一组动作。</li>
<li>调用者通过调用命令对象的 execute() 发出请求，这会使得接受者的动作被调用。</li>
<li>调用者可以接受命令当做参数，甚至在运行时动态地进行。</li>
<li>命令可以支持撤销，做法是实现一个 undo() 方法来回到 execute() 被执行前的状态。</li>
<li>宏命令是命令的一种简单的延伸，允许调用多个命令。宏方法也可以支持撤销。</li>
<li>实际操作时，很常见使用“聪明”命令对象，也就是直接实现了请求，而不是将工作委托给接受者。</li>
<li>命令也可以用来实现日志和事务系统。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Head First 设计模式 Chapter5：单件模式（Singleton Pattern）]]></title>
        <id>https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter5dan-jian-mo-shi-singleton-pattern/</id>
        <link href="https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter5dan-jian-mo-shi-singleton-pattern/">
        </link>
        <updated>2020-12-22T11:17:22.000Z</updated>
        <content type="html"><![CDATA[<pre><code>public class Singleton {
    private static Singleton uniqueInstance;
    // 这里有其他的有用实例化变量
    private Singleton() { }
    public static Singleton getInstance () {
        if (uniqueInstance == null) {
            uniqueInstance = new Singleton();
        }
        return uniqueInstance;
    }
    // 这里是其他的有用方法
}
</code></pre>
<p>单件模式：</p>
<blockquote>
<p>确保一个类只有一个实例，并提供一个全局访问点。</p>
</blockquote>
<ul>
<li>我们正在把某个类设计成自己管理的一个单独实例，同时也避免其他类再自行产生实例。要想取得单间实例，通过单件类是唯一的途径。</li>
<li>我们也提供对这个实例的全局访问点：当你需要实例时，向类查询，它会返回单个实例。前面的例子利用延迟实例化的方式创建单件，这种做法对资源敏感的对象特别重要。</li>
</ul>
<p>多线程创建实例问题解决办法：</p>
<ol>
<li>同步 getInstance() 方法</li>
<li>急切实例化</li>
<li>双重检查加锁</li>
</ol>
<p><strong>双重检查加锁</strong></p>
<pre><code>public class Singleton {
    private volatile static Singleton uniqueInstance;
    // 这里有其他的有用实例化变量
    private Singleton() { }
    public static Singleton getInstance () {
        if (uniqueInstance == null) {
            synchronized(Singleton.class) {
                if (uniqueInstance == null) {
                     uniqueInstance = new Singleton();
                }
            }
        }
        return uniqueInstance;
    }
    // 这里是其他的有用方法
}
</code></pre>
<p>要点：</p>
<ul>
<li>单件模式确保程序中一个类最多只有一个实例。</li>
<li>单件模式也提供访问这个实例的全局点。</li>
<li>在 Java 中实现单件模式需要私有的构造器、一个静态方法和一个静态变量。</li>
<li>确定在性能和资源上的限制，然后小心地选择适当的方案来实现单件，以解决多线程的问题（我们必须认定所有的程序都是多线程的）。</li>
<li>小心，你如果使用多个类加载器，可能导致单件失效而产生多个实例。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Head First 设计模式 Chapter 4：工厂模式]]></title>
        <id>https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter-4gong-han-mo-shi/</id>
        <link href="https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter-4gong-han-mo-shi/">
        </link>
        <updated>2020-12-21T07:12:31.000Z</updated>
        <content type="html"><![CDATA[<p>工厂（factory）处理创建对象的细节。</p>
<p><strong>工厂方法用来处理对象的创建，并将这样的行为封装在子类中。这样，客户程序中关于超类的代码就和子类对象创建代码解耦了</strong></p>
<p><code>abstract Product factoryMethod(string type)</code></p>
<p>工厂方法模式：</p>
<blockquote>
<p>定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p>
</blockquote>
<p>依赖倒置原则（Dependency Inversion Principle）:</p>
<blockquote>
<p>要依赖抽象，不要依赖具体类</p>
</blockquote>
<p>这个原则说明了：不能让高层组件依赖底层组件，而且，不敢高层或底层组件，“两者”都应该依赖于抽象。<br>
在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。<br>
使用中的的指导方针：</p>
<ul>
<li>变量不可以持有具体类的应用。（如果使用 new，就会持有具体类的应用，你可以改用工厂来避开这样的做法。）</li>
<li>不要让类派生自具体类。（请派生自一个抽象—接口或抽象类。）</li>
<li>不要覆盖基类中已实现的方法。</li>
</ul>
<p>抽象工厂模式：</p>
<blockquote>
<p>提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p>
</blockquote>
<p>抽象工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要知道（或关心）实际产出的具体产品是什么。这样一来，客户就从具体的产品中被解耦。</p>
<p>要点：</p>
<ul>
<li>所有的工厂都是用来封装对象的创建。</li>
<li>简单工厂，虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体类解耦。</li>
<li>工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象。</li>
<li>抽象工厂使用对象组合：对象的创建被实现在工厂接口所暴露的方法中。</li>
<li>所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合。</li>
<li>工厂方法允许类将实例化延迟到子类进行。</li>
<li>抽象工厂创建相关的对象家族，而不需要依赖它们的实现类。</li>
<li>依赖倒置原则，指导我们避免依赖具体类型，而要尽量依赖抽象。</li>
<li>工厂是很有威力的技巧，帮助我们针对抽象编程，而不要针对具体类编程。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Head First 设计模式 Chapter 3：装饰者模式]]></title>
        <id>https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter-3zhuang-shi-zhe-mo-shi/</id>
        <link href="https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter-3zhuang-shi-zhe-mo-shi/">
        </link>
        <updated>2020-12-21T01:58:36.000Z</updated>
        <content type="html"><![CDATA[<p>开放-关闭原则</p>
<ul>
<li>类应该对扩展开放，对修改关闭</li>
</ul>
<p>我们的目标是允许类容易扩展，在不修改现有代码的情况下，就可搭配新的行为。这样的设计具有弹性可以应对改变，可以接受新的功能来应对改变的需求。</p>
<p>在选择需要被扩展的代码部分时要小心。每个部分都采用开放-关闭原则，是一种浪费，也没必要，还会导致代码变得复杂且难以理解。</p>
<p>OO模式</p>
<ul>
<li>装饰者模式——动态地将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。</li>
</ul>
<p>要点：</p>
<ul>
<li>继承属于扩展形式之一，但不见得是达到弹性设计的最佳方式。</li>
<li>在我们的设计中，应该允许行为可以被扩展，而无需修改现有的的代码。</li>
<li>组合和委托可用于在运行时动态地加上新的行为。</li>
<li>除了继承，装饰者模式也可以让我们扩展行为。</li>
<li><strong>装饰者模式意味着一群装饰者类，这些类用来包装具体组件。</strong></li>
<li><strong>装饰者类反映出被装饰的组件类型（事实上，他们具有相同的类型都经过接口或者继承实现）。</strong></li>
<li><strong>装饰者可以在被装饰者的行为前面与/或后面加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的。</strong></li>
<li>你可以用无数个装饰者包装一个组件。</li>
<li>装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。</li>
<li>装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂。</li>
</ul>
<p><s><em>装饰者类和被装饰者类具有相同的类型，可以使得装饰者继续嵌套装饰。</em></s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSAPP Chapter 11：网络编程]]></title>
        <id>https://dade68.github.io/post/csapp-chapter-11wang-luo-bian-cheng/</id>
        <link href="https://dade68.github.io/post/csapp-chapter-11wang-luo-bian-cheng/">
        </link>
        <updated>2020-12-20T12:08:33.000Z</updated>
        <content type="html"><![CDATA[<p>每个网络应用都是基于客户端-服务器模型的。根据这个模型，一个应用是由一个服务器和一个或多个客服端组成的。服务器管理资源，以某种方式操作资源，为它的客户端提供服务。客服端-服务器模型中的基本操作是客服端-服务器事务，它是由客户端请求和跟随其后的服务器响应组成的。</p>
<p>客户端和服务器通过因特网这个全球网络来通信。从程序员的观点来看，我们可以把因特网看成是一个全球范围的主机集合，具有以下几个属性: 1)每个因特网主机都有一个唯一的32位名字，称为它的 IP 地址。 2） IP 地址的集合被映射为一个因特网域名的集合。 3）不同因特网主机上的进程能够通过连接互相通信。</p>
<p>客服端和服务器通过使用套接字接口建立连接。一个套接字是连接的一个端点，连接以文件描述符的形式提供给应用程序。套接字接口提供了打开和关闭套接字描述符的函数。客服端和服务器通过读写这些描述符来实现彼此间的通信。</p>
<p>Web 服务器使用 HTTP 协议和它们的客户端(例如浏览器)彼此通信。浏览器向服务器请求静态或者动态的内容。对静态内容的请求是通过从服务器磁盘取得文件并把它返回给客户端来服务的。对动态内容的请求是通过在服务器上一个子进程的上下文中运行一个程序并将它的输出返回给客户端来服务的。CGI 标准提供了一组规则，来管理客户端如何将程序参数传递给服务器，服务器如何将这些参数以及其他信息传递给子进程，以及子进程如何将它的输出发送回客户端。只用几百行 C 代码就能实现一个简单但是有功效的 Web 服务器，它既可以提供静态内容，也可以提供动态内容。</p>
]]></content>
    </entry>
</feed>