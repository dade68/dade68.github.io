<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dade68.github.io</id>
    <title>flowaflow</title>
    <updated>2020-12-15T08:47:31.191Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dade68.github.io"/>
    <link rel="self" href="https://dade68.github.io/atom.xml"/>
    <subtitle>Welcome to my secret park!</subtitle>
    <logo>https://dade68.github.io/images/avatar.png</logo>
    <icon>https://dade68.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, flowaflow</rights>
    <entry>
        <title type="html"><![CDATA[Head First 设计模式 Chapter 2：观察值(Observer)模式]]></title>
        <id>https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter-2guan-cha-zhi-observermo-shi/</id>
        <link href="https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter-2guan-cha-zhi-observermo-shi/">
        </link>
        <updated>2020-12-15T08:26:13.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>观察者模式定义了对象之间一对多的关系。</li>
<li>主题(也就是可观察者)用一个共同的接口来更新观察者。</li>
<li>观察者和可观察者之间用松耦合方式组合(loosecoupling)，可观察者不知道观察者的细节，只知道观察者实现了观察者接口。</li>
<li>使用此模式时，你可从被观察者处推(push)或拉(pull)数据(然而，推的方式被认为更“正确”)。</li>
<li>有多个观察者时，不可以依赖特定的通知顺序。</li>
<li>Java有多种观察者模式的实现，包括了通用的java.util.Observable。</li>
<li>要注意java.util.Observable实现上所带来的一些问题。</li>
<li>如果有必要的话，可以实现自己的Observable，这并不难，不要害怕。</li>
<li>Swing大量使用观察者模式，许多GUI框架也是如此。</li>
<li>此模式也被应用在许多地方，例如：JavaBeans、RMI。</li>
</ul>
<h1 id="oo原则">OO原则</h1>
<ol>
<li>封装变化</li>
<li>多用组合，少用继承</li>
<li>针对接口编程，不针对实现编程</li>
<li>为交互对象之间的松耦合设计而努力。</li>
</ol>
<h1 id="oo模式">OO模式</h1>
<p>观察者模式——在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Head First 设计模式 Chapter 1:设计模式入门]]></title>
        <id>https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter-1she-ji-mo-shi-ru-men/</id>
        <link href="https://dade68.github.io/post/head-first-she-ji-mo-shi-chapter-1she-ji-mo-shi-ru-men/">
        </link>
        <updated>2020-12-15T08:06:01.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>良好的OO设计必须具备可复用、可扩充、可维护三个特性。</li>
<li>模式可以让我们建造处具有良好OO设计质量的系统。</li>
<li>模式被认为是历经验证的OO设计经验。</li>
<li>模式不是代码，而是针对设计问题的通用解决方案。你可把它们应用到特定的应用中。</li>
<li>模式不是被发明，而是被发现。</li>
<li>大多数的模式和原则，都着眼于软件变化的主题。</li>
<li>大多数的模式都允许系统局部改变独立于其他部分。</li>
<li>我们常把系统中会变化的部分抽出来封装。</li>
<li>模式让开发人员之间有共享的语言，能够最大化沟通的价值。</li>
</ul>
<h1 id="oo原则">OO原则</h1>
<ol>
<li>封装变化</li>
<li>多用组合，少用继承</li>
<li>针对接口编程，不针对实现编程</li>
</ol>
<h1 id="oo模式">OO模式</h1>
<p>策略模式——定义算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSAPP Chapter 9: 虚拟内存]]></title>
        <id>https://dade68.github.io/post/csapp-chapter-9-xu-ni-nei-cun/</id>
        <link href="https://dade68.github.io/post/csapp-chapter-9-xu-ni-nei-cun/">
        </link>
        <updated>2020-12-11T07:35:06.000Z</updated>
        <content type="html"><![CDATA[<p>为了更加有效地管理内存并且少出错， 现代系统提供了一种对主存的抽象概念，叫做虚拟内存(VM)。虚拟内存是硬件异常、硬件地址翻译、主存、磁盘文件和内核软件的完美交互，它为每个进程提供了一个大的、一致的和私有的地址空间。通过一个很清晰的机制，虚拟内存提供了三个重要的能力：1）它将主存看成是一个存储在磁盘上的地址空间高速缓存，在主存中只保存活动区域，并根据需要在磁盘和主存之间来回传送数据，通过这种方式，它高效地使用了主存。2）它为每个进程提供了一致的空间，从而简化了内存管理。3)它保护了每个进程的地址空间不被其他进程破坏。</p>
<h1 id="linux虚拟内存系统">Linux虚拟内存系统</h1>
<p>Linux为每个进程维护了一个单独的虚拟地址空间。<br>
内核虚拟内存包含内核中的代码和数据结构。内核虚拟内存的某些区域被映射到所有进程共享的物理页面。</p>
<ol>
<li>Linux虚拟内存区域<br>
Linux将虚拟内存组织成一些区域(也叫做段)的集合。一个区域(area)就是已经存在着的(已分配的)虚拟内存的连续片(chunk)，这些页是以某种方式相关联的。一般由一种内核数据结构记录一个进程中的虚拟内存区域。</li>
<li>Linux缺页异常处理<br>
假设MMU在试图翻译某个虚拟地址A时，触发了一个缺页。这个异常导致控制转移到内核的缺页处理程序，处理程序随后就执行下面的步骤：<br>
1）虚拟地址A是合法的吗？换句话说，A在某个区域结构定义的区域内吗？为了回答这个问题，缺页处理程序搜索区域结构的链表，实际中，Linux在链表中构建了一棵树，并在这棵树上进行查找。如果这个指令是非法的，那么缺页处理程序就触发一个段错误，从而终止这个进程。<br>
2）试图进行的内存访问是否合法？换句话说，进程是否有读、写或者执行这个区域内页面的权限？如果试图进行的访问是不合法的，那么缺页处理程序会触发一个保护异常，从而终止这个进程。<br>
3）此刻，内核知道这个缺页是由于对合法的虚拟地址进行合法的操作造成的。它是这样来处理这个缺页的：选择一个牺牲页面，如果这个牺牲页面被修改过，那么就将它交换出去，换入新的页面并更新页表。当缺页处理程序返回时，CPU重新启动引起缺页的指令，这条指令将再次发送A到MMU。这次，MMU就能正常的翻译A，而不会再产生缺页中断了。</li>
</ol>
<h1 id="内存映射">内存映射</h1>
<p>Linux通过将一个虚拟内存区域与一个磁盘上的对象(object)关联起来，以初始化这个虚拟内存区域的内容，这个过程称为内存映射(memory mapping)。虚拟内存区域可以映射到两种类型的对象中的一种：<br>
1）Linux文件系统中的普通文件<br>
2）匿名文件：映射到匿名文件的区域中的页面有时也叫做请求二进制零的页(demand-zerp page)。<br>
无论在那种情况中，一旦一个虚拟页面被初始化了，它就在一个由内核维护的专门的交换文件(swap file)之间换来换去。交换文件也叫做(swap space)或者交换区域(swap area)。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[大聪明牛逼]]></title>
        <id>https://dade68.github.io/post/da-cong-ming-niu-bi/</id>
        <link href="https://dade68.github.io/post/da-cong-ming-niu-bi/">
        </link>
        <updated>2020-12-11T03:51:03.000Z</updated>
        <content type="html"><![CDATA[<p>不知道写什么好，那就<strong>杨奕飞牛逼</strong>就完事了！<br>
😜😝😛<br>
<img src="https://dade68.github.io/post-images/1607659197957.gif" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>